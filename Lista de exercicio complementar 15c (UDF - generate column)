1.	Considerando que a coluna STATUS da tabela ESTADO apresenta ‘A’ para estados ativos e ‘I’ para inativos. Crie uma coluna gerada virtual que apresente a informação completa (ATIVO e INATIVO). Após a criação da coluna, escreva a consulta que apresente a coluna virtual.
use BANCO;
ALTER TABLE ESTADO ADD EXTENSO VARCHAR(10) AS (CASE STATUS WHEN "A" THEN "ATIVO" WHEN "I" THEN "INATIVO" END);
SELECT NOME, EXTENSO FROM ESTADO;

2.	A coluna DATA_CADASTRO da tabela CIDADE tem a finalidade de armazenar as datas dos registros. Neste contexto, crie uma coluna gerada armazenada que classifique os registros em “novo” (após 2010) e “antigo” (demais registros). Após a criação da coluna, escreva a consulta que apresente a coluna gerada armazenada.
use BANCO;
ALTER TABLE CIDADE ADD EXTENSO VARCHAR(10) AS (CASE WHEN YEAR(DATA_CADASTRO)> 2010 THEN "NOVO" WHEN YEAR(DATA_CADASTRO)<2010 THEN"ANTIGO" END);
SELECT EXTENSO FROM CIDADE;
3.	Em relação aos exercícios anteriores, explique a diferença entre as duas elencando as vantagens e desvantagens de cada uma.
VIRTUAL significa que o valor do campo é calculado sempre que for realizada uma consulta a ele, mas seus dados não ficam armazenados na tabela em si. O campo nesse caso não ocupa espaço em disco. É possível criar índices secundários em colunas calculadas virtuais (com InnoDB).
STORED significa que o valor do campo é calculado (em operações de inserção e atualização de dados) e armazenado na tabela. O acesso aos dados é mais rápido nesse caso, mas obviamente ocupa mais espaço em disco

4.	Escreva uma função que receba como parâmetro um e-mail, verifique se é válido (possui “@”) e retorne o resultado. Teste a função em uma das tabelas do estudo de caso. 

5.	Escreva uma função que receba como parâmetro o código de um produto, verifique se o preço de venda está pelo menos 30% superior ao preço de compra e retorne o resultado. Em seguida, escreva um único comando que utilize a função criada para verificar os preços de todos os produtos cadastrados.
  DROP FUNCTION IF EXISTS PRECOCUSTO;
DELIMITER // 
CREATE FUNCTION PRECOCUSTO(CODIGO_PRODUTO INT)
RETURNS BOOLEAN DETERMINISTIC
BEGIN
	DECLARE VERDADEIRO BOOLEAN DEFAULT TRUE ;
    DECLARE PRECO_CUSTO FLOAT;
    DECLARE PRECO_VENDA FLOAT;
		SELECT PRECO_CUSTO, PRECO_VENDA INTO PRECO_CUSTO, PRECO_VENDA FROM PRODUTO WHERE PRODUTO.ID = CODIGO_PRODUTO;
        IF PRECO_VENDA <= (PRECO_CUSTO *1.30) THEN
			BEGIN
				SET VERDADEIRO = FALSE;
			END;
		END IF;
	RETURN VERDADEIRO;
END;
//
DELIMITER ;

SELECT PRECOCUSTO(PRODUTO.ID) FROM PRODUTO
6.	Considerando em que a coluna TOTAL da tabela COMPRA está desnormalizada, escreva uma única função que verifique a coesão de todos os totais da tabela compra.
