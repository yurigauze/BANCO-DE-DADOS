01) Crie uma função que recebe um valor (decimal) e verifique se é positivo. 

DROP FUNCTION IF EXISTS POSITIVO; -- eliminando a função 
//POSITIVO
DELIMITER // 
CREATE FUNCTION POSITIVO(VALOR FLOAT)
RETURNS boolean DETERMINISTIC
BEGIN
	DECLARE positivo boolean DEFAULT False;
	IF valor >= 0 THEN
		BEGIN
			SET positivo = true;
		END;
	END IF;
	RETURN positivo;
END;
//
DELIMITER ;

SELECT POSITIVO(5.0);
SELECT POSITIVO(-5.0);

02) Crie uma função que recebe um número e verifique se: é par ou ímpar e se é positivo ou negativo. 

DROP FUNCTION IF EXISTS NUMERO; -- eliminando a função 
//NUMERO
DELIMITER // 
CREATE FUNCTION NUMERO(VALOR FLOAT)
RETURNS varchar(100) DETERMINISTIC

BEGIN
DECLARE NUMERO Varchar(100);
DECLARE positivo varchar(100) DEFAULT "NEGATIVO";
DECLARE par varchar(100) DEFAULT "IMPAR";
	BEGIN

		IF valor >= 0 THEN
			BEGIN
				SET positivo = "POSITIVO";
			END;
		END IF;
		IF valor %2= 0 THEN
			BEGIN
				SET par = "PAR";
			END;
		END IF;

	END;
	SET NUMERO = CONCAT(positivo," E ", par);
    RETURN NUMERO;
END;

//
DELIMITER ;

SELECT NUMERO(6.0);

03) Crie uma função que recebe o nome e o sobrenome e retorno o nome completo. Para cliente inativos, informe "inativo". 
DROP FUNCTION IF EXISTS ola; -- eliminando a função 
DELIMITER // 
CREATE FUNCTION ola(NOME VARCHAR(50), SOBRENOME VARCHAR(50), ATIVO CHAR(1)) -- função com if e else
RETURNS VARCHAR(150) DETERMINISTIC
BEGIN
	DECLARE FRASE VARCHAR(100);
	IF ATIVO = 'S' THEN
		BEGIN
			SET FRASE = CONCAT(NOME, " ", SOBRENOME);
		END;
	ELSE
		BEGIN
			SET FRASE ='CLIENTE INATIVO';
        END;
	END IF;
	RETURN frase;
END;
//
DELIMITER ;

SELECT ola("YURI", "GAUZE", 'N'); -- testando função

04) Crie uma função que recebe o código do cliente e retorne o nome completo, telefone e endereço. 
USE BANCO;
DROP FUNCTION IF EXISTS get_nome_cliente; -- eliminando a função 

DELIMITER // 
CREATE FUNCTION get_nome_cliente(codigo_cliente INT)  -- função com if e else
RETURNS VARCHAR(500) DETERMINISTIC
BEGIN
	DECLARE FRASE VARCHAR(500);
    DECLARE nome_cliente VARCHAR(100);
    DECLARE FONE_cliente VARCHAR(100);
    DECLARE ENDERECO_cliente VARCHAR(100);
	SELECT NOME, FONE, ENDERECO INTO NOME_CLIENTE, FONE_CLIENTE, ENDERECO_CLIENTE  FROM CLIENTE WHERE CLIENTE.ID = codigo_cliente;
    SET frase = CONCAT(nome_cliente, " - ", FONE_cliente, " - ", ENDERECO_cliente);
    RETURN FRASE;
END;
//
DELIMITER ;

SELECT get_nome_cliente(1);

05) Crie uma função que recebe o código do produto e retorne a quantidade geral vendida.
/*Crie uma função que recebe o código do produto e retorne a quantidade geral vendida. */
USE BANCO;
DROP FUNCTION IF EXISTS TOTAL_VENDIDO -- eliminando a função 

DELIMITER // 
CREATE FUNCTION TOTAL_VENDIDO(codigo_produto INT)
RETURNS int DETERMINISTIC
BEGIN
	DECLARE TOTAL INT;
		SELECT sum(IVENDA.QUANTIDADE) INTO TOTAL
		FROM IVENDA, PRODUTO
		WHERE IVENDA.PRODUTO_ID = PRODUTO.ID
			AND PRODUTO.ID = codigo_produto;
	RETURN TOTAL;
END;
//
DELIMITER ;

SELECT TOTAL_VENDIDO(1);

06) Crie uma função que recebe um valor (decimal - preço de um produto) e retorne o máximo de desconto que pode ser dado (até 1 unidades - 2% de desnconto, até 3 unidades 4% de desconto e mais que 3 unidades 5% de desconto). 

/*Crie uma função que recebe o código do produto e retorne a quantidade geral vendida. */
USE BANCO;
DROP FUNCTION IF EXISTS DESCONTO; -- eliminando a função 

DELIMITER // 
CREATE FUNCTION DESCONTO(VALOR FLOAT)
RETURNS VARCHAR(500) DETERMINISTIC
BEGIN
	DECLARE FRASE VARCHAR(500);
	DECLARE DESCONTO1 FLOAT; -- 2%
  	DECLARE DESCONTO2 FLOAT; -- 3%
 	DECLARE DESCONTO3 FLOAT; -- 5%
    
    SET DESCONTO1 = VALOR*0.02;
    SET DESCONTO2 = VALOR*0.03;
    SET DESCONTO3 = VALOR*0.05;
    SET FRASE = CONCAT("1 UNIDADE R$", DESCONTO1, " DE DESCONTO, 3 UNIDADE R$", DESCONTO2, " DE DESCONTO, 5 UNIDADE R$", DESCONTO3, " DE DESCONTO");
	RETURN FRASE;
END;
//
DELIMITER ;

SELECT DESCONTO(700.00);

07) Crie uma função que retorno o total de uma venda. 
	DELIMITER // 
	CREATE FUNCTION TOTAL_VENDA(VENDA INT)
	RETURNS FLOAT DETERMINISTIC
	BEGIN
		DECLARE TOTAL FLOAT;
		SELECT TOTAL INTO TOTAL	FROM VENDA	WHERE VENDA.ID = VENDA;

		RETURN TOTAL;
	END;
	//
	DELIMITER ;

	SELECT TOTAL_VENDA(2);

08) Crie uma função que receba o código da venda e retorno o nome do cliente. 

	/*Crie uma função que recebe o código do produto e retorne a quantidade geral vendida. */
	USE BANCO;
	DROP FUNCTION IF EXISTS NOME_CLIENTE_VENDA; -- eliminando a função 

	DELIMITER // 
	CREATE FUNCTION NOME_CLIENTE_VENDA(VENDA INT)
	RETURNS VARCHAR(100) DETERMINISTIC
	BEGIN
		DECLARE NOME VARCHAR(500) ;
		SELECT NOME INTO NOME FROM CLIENTE, VENDA WHERE CLIENTE.ID = VENDA.CLIENTE_ID AND VENDA.ID = VENDA;
		RETURN NOME;
	END;
	//
	DELIMITER ;

	SELECT NOME_CLIENTE_VENDA(2);
    SELECT NOME_CLIENTE_VENDA(VENDA.ID) FROM VENDA;
    DROP FUNCTION IF EXISTS NOME_CLIENTE_VENDA;
    
    
09) Qual a diferença? Qual possui o melhor desempenho?
O TESTE SEM USAR TABELA RETORNA UM UNICO VALOR PARA QUAL FOI ESCOLHIDO (CODIGO DA VENDA), JÁ A CONSULTA UTILIZA TODOS OS REGISTROS (VENDA.ID) DA TEBELA VENDA E RETORNA OS NOMES. A CONSULTA COM UM UNICO VALOR TEM UM DESEMPENHO MENOR
10) Utilizamos a função get_nome_cliente, evitando JOIN. Qual a vantagem e a desvantagem? Em que caso devemos utilizar?
11) Elabore 3 funções de acordo com o seu projeto utilizando parâmetos, select into e estrutura de decisão.
