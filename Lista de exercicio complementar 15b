1.	Escreva uma função que:
    1.1.Retorne o seu nome. Faça a chamada da função.
DROP FUNCTION IF EXISTS NOME;
DELIMITER // 
CREATE FUNCTION NOME(NOME VARCHAR(100))
RETURNS VARCHAR(100) DETERMINISTIC
BEGIN
	RETURN NOME;
END;
//
DELIMITER ;

SELECT NOME("YURI");

    1.2.Retorne o seu nome utilizando uma variável. Faça a chamada da função.

DROP FUNCTION IF EXISTS NOME;
DELIMITER // 
CREATE FUNCTION NOME(NOME VARCHAR(100))
RETURNS VARCHAR(100) DETERMINISTIC
BEGIN
	DECLARE FRASE VARCHAR(050);
	SET FRASE = NOME;
	RETURN FRASE;
END;
//
DELIMITER ;

SELECT NOME("YURI");

2.	Escreva uma função que receba o ano de nascimento e retorne a idade. Faça a chamada da função.

DROP FUNCTION IF EXISTS IDADE;
DELIMITER // 
CREATE FUNCTION IDADE(ANO INT)
RETURNS INT DETERMINISTIC
BEGIN
	DECLARE IDADE INT;
	SET IDADE = 2022-ANO;
	RETURN IDADE;
END;
//
DELIMITER ;

SELECT IDADE(2000);


3.	Escreva uma função que receba o ano de nascimento e retorne se a pessoa é ou não maior que 18 anos. Faça a chamada da função.


DROP FUNCTION IF EXISTS IDADE;
DELIMITER // 
CREATE FUNCTION IDADE(ANO INT)
RETURNS VARCHAR(50) DETERMINISTIC
BEGIN
	DECLARE IDADE INT;
    DECLARE MAIOR VARCHAR(50);
	SET IDADE = 2022-ANO;
    IF IDADE > 18 THEN
	BEGIN
		SET MAIOR = "MAIOR DE IDADE";
	END;
ELSE
	BEGIN
		SET MAIOR = "MENOR DE IDADE";
	END;
END IF;
RETURN MAIOR;
END;
//
DELIMITER ;

SELECT IDADE(2000);

4Escreva uma função que receba a altura e o peso, calcule o IMC e retorne se está acima do peso. Faça a chamada da função.


DROP FUNCTION IF EXISTS IMC;
DELIMITER // 
CREATE FUNCTION IMC(ALTURA FLOAT, PESO FLOAT)
RETURNS VARCHAR(50) DETERMINISTIC
BEGIN
	DECLARE IMC FLOAT;
    DECLARE SOBREPESO VARCHAR(50);
	SET IMC = PESO/(ALTURA*ALTURA);
    IF IMC > 25 THEN
	BEGIN
		SET SOBREPESO = "ESTÁ ACIMA DO PESO";
	END;
ELSE
	BEGIN
		SET SOBREPESO = "ESTA ABAIXO DO PESO";
	END;
END IF;
RETURN SOBREPESO;
END;
//
DELIMITER ;

SELECT IMC(43, 172);

5.	Escreva uma função que receba como parâmetro, o código de cliente, busque o ano de nascimento e retorne se o ciente é ou não maior que 18 anos. Faça a chamadada função.
USE BANCO;
DROP FUNCTION IF EXISTS IDADE;
DELIMITER // 
CREATE FUNCTION IDADE(CLIENTEID INT)
RETURNS VARCHAR(50) DETERMINISTIC
BEGIN
	DECLARE IDADE INT;
    DECLARE CALCULO INT;
    DECLARE MAIOR VARCHAR(50);
	SELECT YEAR(DATA_NASCIMENTO) INTO IDADE FROM CLIENTE WHERE CLIENTE.ID = CLIENTEID;
	SET CALCULO = 2022-IDADE;
    IF CALCULO > 18 THEN
	BEGIN
		SET MAIOR = "MAIOR DE IDADE";
	END;
ELSE
	BEGIN
		SET MAIOR = "MENOR DE IDADE";
	END;
END IF;
RETURN MAIOR;
END;
//
DELIMITER ;

SELECT IDADE(2);

Escreva uma função que receba como parâmetro, o código do funcionário, busque a altura e o peso, calcule o IMC e retorne se o funcionário está acima do peso. Faça a chamada da função.
DROP FUNCTION IF EXISTS IMC;
DELIMITER // 
CREATE FUNCTION IMC(FUNCIONARIO_ID INT)
RETURNS VARCHAR(50) DETERMINISTIC
BEGIN
	DECLARE IMC FLOAT;
    DECLARE ALTUTA FLOAT;
    DECLARE PESO FLOAT;
    DECLARE SOBREPESO VARCHAR(50);
    SELECT ALTURA, PESO INTO ALTURA, PESO FROM FUNCIONARIO WHERE FUNCIONARIO.ID = FUNCIONARIO_ID;
	SET IMC = PESO/(ALTURA*ALTURA);
    IF IMC > 25 THEN
	BEGIN
		SET SOBREPESO = "ESTÁ ACIMA DO PESO";
	END;
ELSE
	BEGIN
		SET SOBREPESO = "ESTA ABAIXO DO PESO";
	END;
END IF;
RETURN SOBREPESO;
END;
//
DELIMITER ;

SELECT IMC(2);

DROP FUNCTION IF EXISTS SOMARATE;
DELIMITER // 
CREATE FUNCTION SOMARATE(LIMITE INT)
RETURNS INT DETERMINISTIC
BEGIN
	DECLARE CONTADOR INT DEFAULT 0;
    DECLARE FATORIAL INT;
    WHILE CONTADOR < LIMITE DO
		SET CONTADOR = CONTADOR +1;
        SET FATORIAL = FATORIAL*NUMERO;
        
	END WHILE;
    RETURN CONTADOR;
END
//
DELIMITER ;

SELECT CALCULAR_FATORIAL(4);


DROP FUNCTION IF EXISTS SOMAR_ATE;
DELIMITER // 
CREATE FUNCTION SOMAR_ATE(LIMITE INT)
RETURNS INT DETERMINISTIC
BEGIN
	DECLARE CONTADOR INT DEFAULT 0;
	MEU_LOOP : LOOP
		SET CONTADOR = CONTADOR +1;
        IF CONTADOR >= LIMITE THEN
			LEAVE MEU_LOOP;
        END IF;
    END LOOP  MEU_LOOP;
    RETURN CONTADOR;
END
//
DELIMITER ;
SELECT SOMAR_ATE(5);



DROP FUNCTION IF EXISTS SOMARATEE;
DELIMITER // 
CREATE FUNCTION SOMARATEE(LIMITE INT)
RETURNS INT DETERMINISTIC
BEGIN
	DECLARE CONTADOR INT DEFAULT 0;
    DECLARE CONTADOR2 INT;
	REPEAT
		SET CONTADOR = CONTADOR +1;
		IF CONTADOR %2= 0 THEN
			BEGIN
				SET CONTADOR2 = CONTADOR2 + CONTADOR;
                END;
		END IF;
	UNTIL CONTADOR >= LIMITE
	END REPEAT;
    RETURN CONTADOR2;
END
//
DELIMITER ;

SELECT SOMARATEE(8);


DROP FUNCTION IF EXISTS CALCULAR_FATORIAL;
DELIMITER // 
CREATE FUNCTION CALCULAR_FATORIAL(NUMERO INT)
RETURNS INT DETERMINISTIC
BEGIN
	DECLARE FATORIAL INT DEFAULT NUMERO;
    IF NUMERO = 0 THEN
			RETURN 1;
    END IF;
    WHILE NUMERO >1 DO
		SET NUMERO = NUMERO -1;
        SET FATORIAL = FATORIAL*NUMERO;
        
	END WHILE;
    RETURN FATORIAL;
END
//
DELIMITER ;

SELECT CALCULAR_FATORIAL(5);


O que é um cursor? Para que serve? Como funciona? Em que cenário são úteis? São semelhantes a qual recurso em linguagens de programação?
CURSOR É UMA ESTRUTURA QUE PERMITE PERCORRER REGISTROS EM UM BANCO DE DADOS. Cursores permitem a manipulação de conjuntos de resultados completos de uma vez, este cenário, um cursor permite que linhas em um conjunto de resultados sejam processadas sequencialmente.

12.	Após a prática do exercício anterior responda:
    12.1.Para usar o cursor precisamos utilizar uma estrutura de repetição? Justifique.
    Sim, o laço de repetição é necessario para que possa percorrer todos os registros
    12.2.Na declaração, é necessário que vinculemos o cursor a qual recurso? Explique.
    ao atributo que será utilizado para realizar a validação
    12.3.Para percorrer um cursor utilizamos ponteiros. Qual comando move o ponteiro para o próximo registro? O que ocorre quando os registros acabam? O que é necessário para que a estrutura de repetição não entre em loop?
    FETCH cursor_venda INTO codigo_produto; move o ponteiro para o proximo registro, definimos um handler que faz com que o loop seja encerrado ao acabar os registros


/* 13.	Faça as funções abaixo: (O objetivo é entender gradativamente o cursor)
    13.1.Escreva a estrutura básica de uma função com a declaração de 3 variáveis (resultado, acabou, qtde_cliente); Teste a função.
    13.2.Reescreva a função anterior declarando um cursor de consulta de todos os clientes ativos; 
    13.3.Reescreva a função anterior abrindo e fechando o cursor;
    13.4.Reescreva a função anterior implementando a estrutura de repetição que percorra o loop;
    13.5.Reescreva a função anterior, de modo que, colete e retorne a quantidade de clientes do loop;
    13.6.Reescreva a função anterior, de modo que, colete e retorne a quantidade de clientes (pessoa física) do loop; 
    13.7.Reescreva a função anterior, de modo que, calcule e retorne a média de idade dos clientes (pessoa física);
14.	Tente implementar um cursor com base no estudo de caso. */
USE BANCO;
DROP FUNCTION IF EXISTS testecursor; -- eliminando a função 
DELIMITER // 
CREATE FUNCTION testecursor(cliente_id int)
RETURNS int DETERMINISTIC
BEGIN
	DECLARE ACABOU int DEFAULT FALSE;
    declare RESULTADO INT;
    declare qtde_cliente int;
    DECLARE CONSULTA_CLIENTE CURSOR FOR
		SELECT CLIENTE.STATUS
		FROM CLIENTE
        where CLIENTE.ID = cliente_id;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET ACABOU = TRUE;
    OPEN CONSULTA_CLIENTE;
    MEU_LOOP : LOOP
		FETCH CONSULTA_CLIENTE INTO RESULTADO;
        IF RESULTADO = FALSE THEN
			BEGIN 
            LEAVE MEU_LOOP;
			END;
		END IF;
	END LOOP;
    CLOSE CONSULTA_CLIENTE;
    RETURN RESULTADO;
END;
//
DELIMITER ;

select testecursor(2);

USE BANCO;
DROP FUNCTION IF EXISTS testecursor; -- eliminando a função 
DELIMITER // 
CREATE FUNCTION testecursor(cliente_id int)
RETURNS int DETERMINISTIC
BEGIN
	DECLARE ACABOU int DEFAULT FALSE;
    declare RESULTADO INT;
    declare qtde_cliente int;
    DECLARE CONSULTA_CLIENTE CURSOR FOR
		SELECT CLIENTE.STATUS
		FROM CLIENTE
        where CLIENTE.ID = cliente_id;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET ACABOU = TRUE;
    OPEN CONSULTA_CLIENTE;
    MEU_LOOP : LOOP
		FETCH CONSULTA_CLIENTE INTO RESULTADO;
        IF RESULTADO = FALSE THEN
			BEGIN 
            LEAVE MEU_LOOP;
			END;
		END IF;
	END LOOP;
    CLOSE CONSULTA_CLIENTE;
    RETURN RESULTADO;
END;
//
DELIMITER ;

select testecursor(2);
