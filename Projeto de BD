3 funções de treino/aprendizagem SINTAXE;

//POSITIVO
DELIMITER // 
CREATE FUNCTION POSITIVO(VALOR FLOAT)
RETURNS boolean DETERMINISTIC
BEGIN
	DECLARE positivo boolean DEFAULT False;
	IF valor >= 0 THEN
		BEGIN
			SET positivo = true;
		END;
	END IF;
	RETURN positivo;
END;
//
DELIMITER ;

SELECT POSITIVO(5.0);
SELECT POSITIVO(-5.0);

USE BANCO;
DROP FUNCTION IF EXISTS TOTAL_VENDIDO 

DELIMITER // 
CREATE FUNCTION TOTAL_VENDIDO(codigo_produto INT)
RETURNS int DETERMINISTIC
BEGIN
	DECLARE TOTAL INT;
		SELECT sum(IVENDA.QUANTIDADE) INTO TOTAL
		FROM IVENDA, PRODUTO
		WHERE IVENDA.PRODUTO_ID = PRODUTO.ID
			AND PRODUTO.ID = codigo_produto;
	RETURN TOTAL;
END;
//
DELIMITER ;

SELECT TOTAL_VENDIDO(1);


DELIMITER // 
CREATE FUNCTION DESCONTO(VALOR FLOAT)
RETURNS VARCHAR(500) DETERMINISTIC
BEGIN
	DECLARE FRASE VARCHAR(500);
	DECLARE DESCONTO1 FLOAT; -- 2%
  	DECLARE DESCONTO2 FLOAT; -- 3%
 	DECLARE DESCONTO3 FLOAT; -- 5%
    
    SET DESCONTO1 = VALOR*0.02;
    SET DESCONTO2 = VALOR*0.03;
    SET DESCONTO3 = VALOR*0.05;
    SET FRASE = CONCAT("1 REGISTRO R$", DESCONTO1, " DE DESCONTO, 3 REGISTRO R$", DESCONTO2, " DE DESCONTO, 5 REGISTRO R$", DESCONTO3, " DE DESCONTO");
	RETURN FRASE;
END;
//
DELIMITER ;

• Pelo menos 3 funções úteis e relevantes no contexto do projeto com uso de estrutura de decisão e
variáveis;

RETORNA SE O IMOVEL ESTÁ BLOQUEADO

DELIMITER // 
CREATE FUNCTION imovel_bloqueado(matricula INT)
RETURNS varchar(100) DETERMINISTIC
BEGIN
	DECLARE bloqueado varchar(100) default "IMOVEL SEM RESTRICAO";
    declare SN char(1);
		SELECT bloqueio INTO SN
		FROM imovel
		WHERE imovel.matricula = matricula;
	IF SN = 'S' THEN
		BEGIN
			SET bloqueado = "IMOVEL BLOQUEADO";
		END;
	END IF;
	RETURN bloqueado;
        
END;
RETORNA O NOME, TELEFONE E ENDEREÇO COMPLETO DO PROPRIETARIO;

DELIMITER // 
CREATE FUNCTION get_nome_cliente(codigo_PROPRIETARIO INT)
RETURNS VARCHAR(500) DETERMINISTIC
BEGIN
	DECLARE FRASE VARCHAR(500);
   	DECLARE nome_PROPRIETARIO VARCHAR(100);
    	DECLARE CPF_PROPRIETARIO VARCHAR(100);
    	DECLARE ENDERECO_PROPRIETARIO VARCHAR(100);
	SELECT NOME, CPF_CNPJ, ENDERECO INTO NOME_PROPRIETARIO, CPF_PROPRIETARIO, ENDERECO_PROPRIETARIO  FROM PROPRIETARIO WHERE PROPRIETARIO.ID = codigo_PROPRIETARIO;
    SET frase = CONCAT(nome_PROPRIETARIO, " - ", CPF_PROPRIETARIO, " - ", ENDERECO_PROPRIETARIO);
    RETURN FRASE;
END;
//
DELIMITER ;

RETORNA OS PROPRIETARIOS COM BASE NA MATRICULA

DELIMITER // 
CREATE FUNCTION Matricula_Proprietario(matricula INT)
RETURNS varchar(100) DETERMINISTIC
BEGIN
	DECLARE proprietario varchar(100);
		SELECT nome INTO proprietario
		FROM proprietario, imovel
		WHERE proprietario.id = proprietario_imovel.proprietario_id
			AND  proprietario_imovel.imovel_matricula = imovel.matricula;
	RETURN proprietario;
END;
//
DELIMITER ;

//
• Pelo menos 1 função com uso de CURSOR;

VERIFICA SE O CPF/CNPJ BLOQUEADO POSSUI IMOVEIS NO CARTORIO

DELIMITER //
CREATE FUNCTION VERIFICA_PRO.BLOQUEIO(DOCUMENTO VARCHAR(18))
	RETURNS BOOL DETERMINISTIC
	BEGIN
	DECLARE resultado BOOL DEFAULT TRUE;
	DECLARE MATRICULA INT;
	DECLARE acabou INT DEFAULT FALSE; -- declarando variável de controle para identificar quando acaba elementos do loop
	DECLARE CURSOR_BLOQUEIO CURSOR FOR
		SELECT IMOVEL.MATRICULA
		FROM IMOVEL, PROPRIETARIO
		WHERE DOCUMENTO = PROPRIETARIO.CPF_CNPJ
        AND PROPRIETARIO. ID = PROPRIETARIO_IMOVEL.PROPRIETARIO.ID
        AND PROPRIETARIO_IMOVEL.IMOVEL_MATRICULA = IMOVEL.MATRICULA;
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET acabou = TRUE; -- se acabar, altera acabou para true
		OPEN CURSOR_BLOQUEIO;
		MEU_LOOP: LOOP
		FETCH CURSOR_BLOQUEIO INTO MATRICULA;
		SET resultado = VERIFICA_BLOQUEIO (DOCUMENTO, MATRICULA );
			IF resultado = TRUE OR acabou THEN -- definindo se acabar os elementos
				BEGIN
					LEAVE MEU_LOOP;
				END;
			END IF;
			END LOOP;
		CLOSE CURSOR_BLOQUEIO;
		RETURN resultado;
	END;
	//
DELIMITER ;
